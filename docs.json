{"modules":[{"name":"Collection","classes":[{"name":"Collection","description":"An utility data structure used within the Discordoo.","extends":[[["Map","<"],["K",", "],["V",">"]]],"construct":{"name":"constructor","description":"The Collection() constructor creates {@link Collection} objects.","params":[{"name":"iterable","optional":false,"type":[[["Iterable","<"],["readonly"," ["],["K",", "],["V","]>"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":22,"file":"Collection.ts","path":"."}},"props":[{"name":"[species]","readonly":true,"type":[[["Function"]]],"meta":{"line":31,"file":"Collection.ts","path":"."}},{"name":"empty","description":"Checks if the collection is empty or not.","readonly":true,"type":[[["boolean"]]],"meta":{"line":85,"file":"Collection.ts","path":"."}},{"name":"size","description":"Gets the amount of elements in this collection.","readonly":true,"type":[[["number"]]],"meta":{"line":78,"file":"Collection.ts","path":"."}}],"methods":[{"name":"clear","description":"Removes all elements from the collection.","returns":[[["void"]]],"meta":{"line":71,"file":"Collection.ts","path":"."}},{"name":"clone","description":"Creates a new collection based on this one.","returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":312,"file":"Collection.ts","path":"."}},{"name":"concat","description":"Merges the specified collections into one and returns a new collection.","params":[{"name":"collections","description":"collections to merge","optional":false,"type":[[["Array","<"],["Collection","<"],["K",", "],["V",">>"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":345,"file":"Collection.ts","path":"."}},{"name":"delete","description":"Removes element from the collection.","params":[{"name":"key","description":"key of element","optional":false,"type":[[["K"]]]}],"returns":[[["boolean"]]],"meta":{"line":64,"file":"Collection.ts","path":"."}},{"name":"equal","description":"Checks if two collections are equal.","params":[{"name":"collection","description":"collection to compare to","optional":false,"type":[[["Collection","<"],["K",", "],["V",">"]]]},{"name":"options","description":"options to use","optional":true,"default":"{}","type":[[["CollectionEqualOptions"]]]}],"returns":[[["boolean"]]],"meta":{"line":321,"file":"Collection.ts","path":"."}},{"name":"every","description":"Checks if all values satisfy the condition.","params":[{"name":"predicate","description":"function to use","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":379,"file":"Collection.ts","path":"."}},{"name":"filter","description":"Filters out the elements which don't meet requirements and returns array (default).","params":[{"name":"filter","description":"function to use","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["boolean"]]]},{"name":"options","description":"filter options","optional":true,"type":[[["CollectionFilterOptions"]]]}],"returns":[[["Array","<["],["K",", "],["V","]>"]]],"returnsDescription":"- array of [ Key, Value ]","meta":{"line":223,"file":"Collection.ts","path":"."}},{"name":"find","description":"Searches for the element in collection and returns it.","params":[{"name":"predicate","description":"function to use","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["boolean"]]]}],"returns":[[["undefined"," | "],["V"]]],"meta":{"line":279,"file":"Collection.ts","path":"."}},{"name":"findKey","description":"Searches for the key in collection and returns it.","params":[{"name":"predicate","description":"function to use","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["boolean"]]]}],"returns":[[["undefined"," | "],["K"]]],"meta":{"line":291,"file":"Collection.ts","path":"."}},{"name":"first","description":"Returns first collection value if it exists.","returns":[[["undefined"," | "],["V"]]],"meta":{"line":392,"file":"Collection.ts","path":"."}},{"name":"firstKey","description":"Returns first collection key if it exists.","returns":[[["undefined"," | "],["K"]]],"meta":{"line":414,"file":"Collection.ts","path":"."}},{"name":"forEach","description":"Executes a function on each of elements of collection.","params":[{"name":"predicate","description":"function to use","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["any"]]]}],"returns":[[["void"]]],"meta":{"line":303,"file":"Collection.ts","path":"."}},{"name":"get","description":"Gets element from collection.","params":[{"name":"key","description":"key of element","optional":false,"type":[[["K"]]]}],"returns":[[["undefined"," | "],["V"]]],"meta":{"line":39,"file":"Collection.ts","path":"."}},{"name":"has","description":"Checks if an element exists in the collection.","params":[{"name":"key","description":"key of element","optional":false,"type":[[["K"]]]}],"returns":[[["boolean"]]],"meta":{"line":56,"file":"Collection.ts","path":"."}},{"name":"intoChunks","description":"Returns a collection chunked into several collections.","params":[{"name":"size","description":"chunk size","optional":true,"type":[[["number"]]]}],"returns":[[["Array","<"],["Collection","<"],["K",", "],["V",">>"]]],"meta":{"line":519,"file":"Collection.ts","path":"."}},{"name":"last","description":"Returns last collection value if it exists.","returns":[[["undefined"," | "],["V"]]],"meta":{"line":436,"file":"Collection.ts","path":"."}},{"name":"lastKey","description":"Returns last collection key if it exists.","returns":[[["undefined"," | "],["K"]]],"meta":{"line":458,"file":"Collection.ts","path":"."}},{"name":"map","description":"Maps each item to another value into an array.","params":[{"name":"predicate","description":"function to use","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["T"]]]}],"returns":[[["Array","<"],["T",">"]]],"meta":{"line":481,"file":"Collection.ts","path":"."}},{"name":"random","description":"Gets a random value from collection.","returns":[[["V"]]],"returnsDescription":"- value","meta":{"line":93,"file":"Collection.ts","path":"."}},{"name":"reduce","description":"Executes a predicate function on each element of the collection, resulting in a single output value.","params":[{"name":"predicate","description":"function to use","optional":false,"type":[[["("],["accumulator",": "],["T",", "],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["T"]]]},{"name":"initialValue","description":"initial value for the accumulator","optional":true,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":496,"file":"Collection.ts","path":"."}},{"name":"set","description":"Sets a new element in the collection.","params":[{"name":"key","description":"key of element","optional":false,"type":[[["K"]]]},{"name":"value","description":"value (element) to set","optional":false,"type":[[["V"]]]}],"returns":[[["Collection","<"],["K",", "],["V",">"]]],"meta":{"line":48,"file":"Collection.ts","path":"."}},{"name":"some","description":"Checks if any of values satisfies the condition.","params":[{"name":"predicate","description":"function to use","optional":false,"type":[[["("],["value",": "],["V",", "],["key",": "],["K",", "],["collection",": "],["Collection","<"],["K",", "],["V",">) => "],["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":365,"file":"Collection.ts","path":"."}}],"meta":{"line":17,"file":"Collection.ts","path":"."}}],"interfaces":[{"name":"CollectionEqualOptions","meta":{"line":1,"file":"CollectionEqualOptions.ts","path":"interfaces"},"props":[{"name":"deep","description":"Perform deep equal (requires lodash installed)","optional":true,"type":[[["undefined"," | "],["boolean"]]]}]},{"name":"CollectionFilterOptions","meta":{"line":1,"file":"CollectionFilterOptions.ts","path":"interfaces"},"props":[{"name":"returnType","description":"The filter returns array by default, but you can specify what to return using this option","optional":true,"type":[[["undefined"," | "],["'collection'"," | "],["'map'"," | "],["'array'"]]]}]},{"name":"CollectionRandomOptions","meta":{"line":1,"file":"CollectionRandomOptions.ts","path":"interfaces"},"props":[{"name":"returnType","description":"Random returns only value(s) by default,\nbut you can specify what to return using this option","optional":true,"type":[[["undefined"," | "],["'values'"," | "],["'keys'"," | "],["'blocks'"]]]},{"name":"unique","description":"Random returns non-unique elements by default,\nbut you can request unique elements using this option.\nPlease note that this reduces performance.","optional":true,"type":[[["undefined"," | "],["boolean"]]]}]}],"types":[],"enums":[],"functions":[],"variables":[]}],"time":1657809063329,"generator":"@discordoo/tapok 2.0.24"}